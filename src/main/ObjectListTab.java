package main;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;
import main.Document.ListChangeListener;

public class ObjectListTab extends Composite {
	private Document attachedDocument;
	private Document.SelectionListener selectionListener;
	private ListChangeListener changeListener;

	/////////////////////////////////
	// Begin autogenerated code

	private Button buttonUp;
	private Button buttonDown;
	private Button delete;
	private Tree tree;

	/////////////////////////////////
	// End autogenerated code

	/**
	 * Create the composite.
	 * 
	 * @param parent
	 * @param style
	 */
	/////////////////////////////////
	// Begin autogenerated code
	public ObjectListTab(Composite parent, int style) {
		super(parent, style);
		setLayout(new GridLayout(1, false));

		tree = new Tree(this, SWT.BORDER);
		tree.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));

		Composite composite = new Composite(this, SWT.NONE);
		composite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		composite.setLayout(new FillLayout(SWT.HORIZONTAL));

		buttonUp = new Button(composite, SWT.NONE);
		buttonUp.setText("Up");

		buttonDown = new Button(composite, SWT.NONE);
		buttonDown.setText("Down");

		delete = new Button(composite, SWT.NONE);
		delete.setText("Delete");

		/////////////////////////////////
		// End autogenerated code

		tree.addSelectionListener(SelectionListener.widgetSelectedAdapter(this::forwardSelectionEvent));

		// Note: Technically, this is a memory leak of ObjectListTab. If this object is removed from the view,
		// it will still be reachable through these lambdas to DocumentManager's static variables.
		//
		// We (currently) don't need to allocate more than one, though, so the memory leak never matters.
		changeListener = this::populate;
		selectionListener = this::rectSelected;
		attachedDocument = DocumentManager.getCurrentDocument();
		attachedDocument.addSelectionListener(selectionListener);
		attachedDocument.addListChangeListener(changeListener);
		DocumentManager.addSelectionListener(document-> {
			attachedDocument.removeSelectionListener(selectionListener);
			attachedDocument.removeListChangeListener(changeListener);
			attachedDocument = document;
			document.addSelectionListener(selectionListener);
			document.addListChangeListener(changeListener);
			populate();
		});
	}

	private void forwardSelectionEvent(SelectionEvent e) {
		if (e.widget == null) {
			DocumentManager.getCurrentDocument().setSelectedRectangle(null);
		} else {
			int index = tree.indexOf((TreeItem) e.item);
			DocumentManager.getCurrentDocument().setSelectedRectangle(index);
		}
	}

	private void rectSelected(Rectangle rect, int index) {
		if (rect == null) {
			tree.deselectAll();
		} else {
			tree.select(tree.getItem(index));
		}
	}

	/**
	 * Call this when the data array changes.
	 */
	public void populate() {
		var file = DocumentManager.getCurrentDocument();
		var data = file.getRectangles();
		String[] entries = new String[data.size()];
		for (int i = 0; i < entries.length; i++) {
			entries[i] = data.get(i).toString();
		}

		tree.removeAll();
		tree.deselectAll();
		for (var entry : entries) {
			var item = new TreeItem(tree, SWT.NONE);
			item.setText(entry);
		}

		// Fake a selection event.
		rectSelected(file.getSelectedRectangle(), file.getSelectedIndex());
	}

	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}
}
