package main;

import java.util.ArrayList;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;

public class ObjectListTab extends Composite {
	private ArrayList<Rectangle> data;
	private Rectangle selectedRectangle;
	private SelectionListener treeListener;
	private ArrayList<RectangleSelectionListener> listeners;

	/////////////////////////////////
	// Begin autogenerated code

	private Button buttonUp;
	private Button buttonDown;
	private Button delete;
	private Tree tree;

	/////////////////////////////////
	// End autogenerated code

	/**
	 * Create the composite.
	 * 
	 * @param parent
	 * @param style
	 */
	/////////////////////////////////
	// Begin autogenerated code
	public ObjectListTab(Composite parent, int style) {
		super(parent, style);
		setLayout(new GridLayout(1, false));

		tree = new Tree(this, SWT.BORDER);
		tree.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));

		Composite composite = new Composite(this, SWT.NONE);
		composite.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		composite.setLayout(new FillLayout(SWT.HORIZONTAL));

		buttonUp = new Button(composite, SWT.NONE);
		buttonUp.setText("Up");

		buttonDown = new Button(composite, SWT.NONE);
		buttonDown.setText("Down");

		delete = new Button(composite, SWT.NONE);
		delete.setText("Delete");

		/////////////////////////////////
		// End autogenerated code
		data = new ArrayList<>();
		selectedRectangle = null;
		treeListener = SelectionListener.widgetSelectedAdapter(this::forwardSelectionEvent);
		tree.addSelectionListener(treeListener);
	}

	private void forwardSelectionEvent(SelectionEvent e) {
		if (e.widget == null) {
			forwardSelectionEvent((Rectangle) null);
		} else {
			int index = tree.indexOf((TreeItem) e.widget);
			assert (index != -1);
			forwardSelectionEvent(data.get(index));
		}
	}

	private void forwardSelectionEvent(Rectangle rectangle) {
		selectedRectangle = rectangle;
		for (var listener : listeners) {
			listener.selected(rectangle);
		}
	}

	public void setData(ArrayList<Rectangle> data) {
		if (data == null) {
			this.data.clear();
		} else {
			this.data = data;
		}
		updateData();
	}

	/**
	 * Call this when the data array changes.
	 */
	public void updateData() {
		String[] entries = new String[data.size()];
		for (int i = 0; i < entries.length; i++) {
			entries[i] = data.get(i).toString();
		}

		tree.removeSelectionListener(treeListener);
		tree.removeAll();
		tree.deselectAll();
		tree.addSelectionListener(treeListener);
		for (var entry : entries) {
			var item = new TreeItem(tree, SWT.NONE);
			item.setText(entry);
		}

		if (selectedRectangle != null) {
			// Try to preserve the selected object.
			int newSelectionIndex = data.indexOf(selectedRectangle);
			if (newSelectionIndex != -1) {
				tree.select(tree.getItem(newSelectionIndex));
				// No need to send a deselection event.
			} else {
				// Send a deselection event.
				forwardSelectionEvent((Rectangle) null);
			}
		} else {
			// Send a deselection event.
			forwardSelectionEvent(new SelectionEvent(null));
		}
	}

	public Rectangle getSelectedRectangle() {
		return selectedRectangle;
	}

	public void addRectangleSelectionListener(RectangleSelectionListener listener) {
		this.listeners.add(listener);
	}

	public boolean removeRectangleSelectionListener(RectangleSelectionListener listener) {
		return this.listeners.remove(listener);
	}

	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}

	public static interface RectangleSelectionListener {
		/**
		 * @param rect
		 *            Null if this is a deselection event.
		 */
		void selected(Rectangle rect);
	}
}
